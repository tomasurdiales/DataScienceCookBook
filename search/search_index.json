{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>Our ~ten commandments...</p>"},{"location":"cookbook/unit-tests/","title":"Tests","text":"<p>Tests are an essential part of our development process. Unit tests are written to validate the correctness of our code, ensuring that it behaves as expected under various conditions. Integration tests are written to validate the interaction between different components of a system, for example to check for the connection between a database and a web server (in our case commonly to test the connection to different Azure services).</p> <p>Our tests are written using <code>pytest</code>, or the stock <code>unittest</code> python framework. Each test is designed to validate a specific functionality of a component, ensuring that it behaves correctly under various conditions, and fails when it's supposed to fail. One common way to come up with new tests is to think in terms of how inputs and outputs should relate to each other, writing tests that cover possible edge cases.</p> <p>We typically arrange to run these tests automatically as part of our CI&amp;CD pipelines, ensuring that the code is always in a working state in accordance to the tests written by its developers.</p> <p>The folder structure we typically recommend is:</p> <pre><code>your_project/\n\u251c\u2500\u2500 src/\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 unit/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 test_very_complex_ai_product.py\n    \u2502   \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 integration/\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"cookbook/unit-tests/#running-tests","title":"Running tests","text":"<p>Where <code>tests/unit/</code> contains all the unit tests and <code>tests/integration/</code> contains all the integration tests.</p> <p>To run all tests and provide a summary of the results, use the following command: <pre><code>pytest\n</code></pre> If you want to run a specific test file, you can simply do: <pre><code>pytest tests/unit/test_very_complex_ai_product.py\n</code></pre></p>"},{"location":"cookbook/unit-tests/#writing-new-tests","title":"Writing new tests","text":"<p>When writing new tests, follow these guidelines:</p> <ul> <li>Ensure each test is independent and does not rely on the state of other tests.</li> <li>Use descriptive names for test cases to make it clear what functionality is being tested.</li> <li>Include setup and teardown steps if necessary to prepare the environment for each test.</li> </ul>"},{"location":"cookbook/unit-tests/#example-of-a-unit-test","title":"Example of a unit test","text":"<pre><code># tests/unit/test_very_complex_ai_product.py\n\nimport pytest\nfrom src import very_complex_ai_product\n\ndef test_very_complex_ai_product_FUNCTION_TO_BE_TESTED() -&gt; None:\n    assert very_complex_ai_product.FUNCTION_TO_BE_TESTED(...) == ...\n    with pytest.raises(ZeroDivisionError):\n        very_complex_ai_product.FUNCTION_TO_BE_TESTED(...)\n</code></pre> <p> And here is the actual implementation of <code>test_very_complex_ai_product.py</code> in this repo: </p>"},{"location":"cookbook/unit-tests/#tests.unit.test_very_complex_ai_product","title":"tests.unit.test_very_complex_ai_product","text":"<p>Unit tests for <code>very_complex_ai_product</code> module.</p> <p>The module contains the following functions:</p> <ul> <li><code>test_very_complex_ai_product_add</code> - Test the very_complex_ai_product.add function.</li> <li><code>test_very_complex_ai_product_divide_mixed_types</code> - Test the very_complex_ai_product.divide function with mixed types.</li> <li><code>test_very_complex_ai_product_divide_zero_divisor</code> - Test the very_complex_ai_product.divide function with a zero divisor.</li> <li><code>test_very_complex_ai_product_divide_zero_very_complex_ai_product_dividend</code> - Test the very_complex_ai_product.divide function with a zero dividend.</li> </ul>"},{"location":"cookbook/unit-tests/#tests.unit.test_very_complex_ai_product.test_very_complex_ai_product_add","title":"test_very_complex_ai_product_add","text":"<pre><code>test_very_complex_ai_product_add()\n</code></pre> <p>Test very_complex_ai_product.add function with several test cases.</p> Source code in <code>tests/unit/test_very_complex_ai_product.py</code> <pre><code>def test_very_complex_ai_product_add() -&gt; None:\n    \"\"\"Test very_complex_ai_product.add function with several test cases.\"\"\"\n    assert very_complex_ai_product.add(4, 2) == 6\n    assert very_complex_ai_product.add(4.0, 2.0) == 6.0\n    assert very_complex_ai_product.add(-1, 1) == 0\n    assert very_complex_ai_product.add(-1.0, -1.0) == -2.0\n</code></pre>"},{"location":"cookbook/unit-tests/#tests.unit.test_very_complex_ai_product.test_very_complex_ai_product_divide_mixed_types","title":"test_very_complex_ai_product_divide_mixed_types","text":"<pre><code>test_very_complex_ai_product_divide_mixed_types()\n</code></pre> <p>Test very_complex_ai_product.divide function with mixed types.</p> Source code in <code>tests/unit/test_very_complex_ai_product.py</code> <pre><code>def test_very_complex_ai_product_divide_mixed_types() -&gt; None:\n    \"\"\"Test very_complex_ai_product.divide function with mixed types.\"\"\"\n    assert very_complex_ai_product.divide(4, 2.0) == 2.0\n    assert very_complex_ai_product.divide(4.0, 2) == 2.0\n</code></pre>"},{"location":"cookbook/unit-tests/#tests.unit.test_very_complex_ai_product.test_very_complex_ai_product_divide_zero_divisor","title":"test_very_complex_ai_product_divide_zero_divisor","text":"<pre><code>test_very_complex_ai_product_divide_zero_divisor()\n</code></pre> <p>Test very_complex_ai_product.divide function with a zero divisor.</p> Source code in <code>tests/unit/test_very_complex_ai_product.py</code> <pre><code>def test_very_complex_ai_product_divide_zero_divisor() -&gt; None:\n    \"\"\"Test very_complex_ai_product.divide function with a zero divisor.\"\"\"\n    with pytest.raises(ZeroDivisionError):\n        very_complex_ai_product.divide(4, 0)\n</code></pre>"},{"location":"cookbook/unit-tests/#tests.unit.test_very_complex_ai_product.test_very_complex_ai_product_divide_zero_very_complex_ai_product_dividend","title":"test_very_complex_ai_product_divide_zero_very_complex_ai_product_dividend","text":"<pre><code>test_very_complex_ai_product_divide_zero_very_complex_ai_product_dividend()\n</code></pre> <p>Test very_complex_ai_product.divide function with a zero dividend.</p> Source code in <code>tests/unit/test_very_complex_ai_product.py</code> <pre><code>def test_very_complex_ai_product_divide_zero_very_complex_ai_product_dividend() -&gt; None:\n    \"\"\"Test very_complex_ai_product.divide function with a zero dividend.\"\"\"\n    assert very_complex_ai_product.divide(0, 2) == 0.0\n    assert very_complex_ai_product.divide(0, 2.0) == 0.0\n</code></pre>"},{"location":"demo/","title":"Welcome","text":"<p>Demo of framework to easily build your project documentation in a professional and beautiful way, using just <code>python</code> and <code>markdown</code>! \ud83d\ude80</p> <p>All thanks to the open-source magic of: <code>MkDocs</code>, <code>Material for MkDocs</code> and <code>mkdocstrings</code> ! \ud83e\udd13</p> <p>Warning</p> <p>This format is in the process of soon becoming the official directive/recommendation for all projects by the AI &amp; Data Science Sub-Chapter.</p> <p>Demo by Tom\u00e1s Urdiales (tomas.urdialesbartolome@externel.be).</p> <p>Soon to be hosted on: developerhub.eliagroup.io</p> <p>The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-to guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p> <p>Note: we are still debating whether to take up this exact approach or something more suited to the needs of the AI &amp; Data Science Sub-Chapter.</p>"},{"location":"demo/#project-overview","title":"Project Overview:","text":""},{"location":"demo/#src","title":"src","text":"<p>Do math with your own functions.</p> <p>Modules exported by this package:</p> <ul> <li><code>very_complex_ai_product.py</code>: Provide several sample math calculations.</li> </ul>"},{"location":"demo/explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"demo/how-to-guides/","title":"How-to guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"demo/how-to-guides/#how-to-add-two-numbers","title":"How To Add Two Numbers?","text":"<p>You have two numbers and you need to add them together. You're in luck!</p> <pre><code>your_project/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 very_complex_ai_product.py\n</code></pre> <p>Inside of your script you can now import the <code>add()</code> function from the <code>src.very_complex_ai_product</code> module:</p> <pre><code># your_script.py\nfrom src.very_complex_ai_product import add\n</code></pre> <p>After you've imported the function, you can use it to add any two numbers that you need to add:</p> <pre><code># your_script.py\nfrom src.very_complex_ai_product import add\n\nprint(add(20, 22))  # OUTPUT: 42.0\n</code></pre> <p>You're now able to add any two numbers!</p>"},{"location":"demo/reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>very_complex_ai_product</code> module.</p>"},{"location":"demo/reference/#src.very_complex_ai_product","title":"src.very_complex_ai_product","text":"<p>Provide state-of-the-art artifical intelligence services.</p> <p>This module allows the user to perform incredibly powerful mathematical calculations (powered by AI \ud83d\udc85).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from src import very_complex_ai_product\n&gt;&gt;&gt; very_complex_ai_product.add(2, 4)\n6\n&gt;&gt;&gt; very_complex_ai_product.multiply(2.0, 4.0)\n8.0\n&gt;&gt;&gt; from src.very_complex_ai_product import divide\n&gt;&gt;&gt; divide(4.0, 2)\n2.0\n</code></pre> <p>The module contains the following functions:</p> <ul> <li><code>add(a, b)</code> - Returns the sum of two numbers.</li> <li><code>subtract(a, b)</code> - Returns the difference of two numbers.</li> <li><code>multiply(a, b)</code> - Returns the product of two numbers.</li> <li><code>divide(a, b)</code> - Returns the quotient of two numbers.</li> </ul>"},{"location":"demo/reference/#src.very_complex_ai_product.add","title":"add","text":"<pre><code>add(a, b)\n</code></pre> <p>Compute and return the sum of two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>A number representing the first addend in the addition.</p> <p> TYPE: <code>int | float</code> </p> <code>b</code> <p>A number representing the second addend in the addition.</p> <p> TYPE: <code>int | float</code> </p> RETURNS DESCRIPTION <code>int | float</code> <p>A number representing the arithmetic sum of <code>a</code> and <code>b</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; add(4.0, 2.0)\n6.0\n&gt;&gt;&gt; add(4, 2)\n6\n</code></pre> Source code in <code>src/very_complex_ai_product.py</code> <pre><code>def add(a: int | float, b: int | float) -&gt; int | float:\n    \"\"\"Compute and return the sum of two numbers.\n\n    Args:\n        a (int | float): A number representing the first addend in the addition.\n        b (int | float): A number representing the second addend in the addition.\n\n    Returns:\n        A number representing the arithmetic sum of `a` and `b`.\n\n    Examples:\n        &gt;&gt;&gt; add(4.0, 2.0)\n        6.0\n        &gt;&gt;&gt; add(4, 2)\n        6\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"demo/reference/#src.very_complex_ai_product.subtract","title":"subtract","text":"<pre><code>subtract(a, b)\n</code></pre> <p>Calculate the difference of two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>A number representing the minuend in the subtraction.</p> <p> TYPE: <code>int | float</code> </p> <code>b</code> <p>A number representing the subtrahend in the subtraction.</p> <p> TYPE: <code>int | float</code> </p> RETURNS DESCRIPTION <code>int | float</code> <p>A number representing the difference between <code>a</code> and <code>b</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; subtract(4.0, 2.0)\n2.0\n&gt;&gt;&gt; subtract(4, 2)\n2\n</code></pre> Source code in <code>src/very_complex_ai_product.py</code> <pre><code>def subtract(a: int | float, b: int | float) -&gt; int | float:\n    \"\"\"Calculate the difference of two numbers.\n\n    Args:\n        a (int | float): A number representing the minuend in the subtraction.\n        b (int | float): A number representing the subtrahend in the subtraction.\n\n    Returns:\n        A number representing the difference between `a` and `b`.\n\n    Examples:\n        &gt;&gt;&gt; subtract(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; subtract(4, 2)\n        2\n    \"\"\"\n    return a - b\n</code></pre>"},{"location":"demo/reference/#src.very_complex_ai_product.multiply","title":"multiply","text":"<pre><code>multiply(a, b)\n</code></pre> <p>Compute and return the product of two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>A number representing the multiplicand in the multiplication.</p> <p> TYPE: <code>int | float</code> </p> <code>b</code> <p>A number representing the multiplier in the multiplication.</p> <p> TYPE: <code>int | float</code> </p> RETURNS DESCRIPTION <code>int | float</code> <p>A number representing the product of <code>a</code> and <code>b</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; multiply(4.0, 2.0)\n8.0\n&gt;&gt;&gt; multiply(4, 2)\n8\n</code></pre> Source code in <code>src/very_complex_ai_product.py</code> <pre><code>def multiply(a: int | float, b: int | float) -&gt; int | float:\n    \"\"\"Compute and return the product of two numbers.\n\n    Args:\n        a (int | float): A number representing the multiplicand in the multiplication.\n        b (int | float): A number representing the multiplier in the multiplication.\n\n    Returns:\n        A number representing the product of `a` and `b`.\n\n    Examples:\n        &gt;&gt;&gt; multiply(4.0, 2.0)\n        8.0\n        &gt;&gt;&gt; multiply(4, 2)\n        8\n    \"\"\"\n    return a * b\n</code></pre>"},{"location":"demo/reference/#src.very_complex_ai_product.divide","title":"divide","text":"<pre><code>divide(a, b)\n</code></pre> <p>Compute and return the quotient of two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>A number representing the dividend in the division.</p> <p> TYPE: <code>int | float</code> </p> <code>b</code> <p>A number representing the divisor in the division.</p> <p> TYPE: <code>int | float</code> </p> RETURNS DESCRIPTION <code>float</code> <p>A number representing the quotient of <code>a</code> and <code>b</code>.</p> RAISES DESCRIPTION <code>ZeroDivisionError</code> <p>An error occurs when the divisor is <code>0</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; divide(4.0, 2.0)\n2.0\n&gt;&gt;&gt; divide(4, 2)\n2.0\n&gt;&gt;&gt; divide(4, 0)\nTraceback (most recent call last):\n...\nZeroDivisionError: division by zero\n</code></pre> Source code in <code>src/very_complex_ai_product.py</code> <pre><code>def divide(a: int | float, b: int | float) -&gt; float:\n    \"\"\"Compute and return the quotient of two numbers.\n\n    Args:\n        a (int | float): A number representing the dividend in the division.\n        b (int | float): A number representing the divisor in the division.\n\n    Returns:\n        A number representing the quotient of `a` and `b`.\n\n    Raises:\n        ZeroDivisionError: An error occurs when the divisor is `0`.\n\n    Examples:\n        &gt;&gt;&gt; divide(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; divide(4, 2)\n        2.0\n        &gt;&gt;&gt; divide(4, 0)\n        Traceback (most recent call last):\n        ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return a / b\n</code></pre>"},{"location":"demo/tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them     write code</li> <li>Inspire confidence through examples that work for     everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul>"}]}